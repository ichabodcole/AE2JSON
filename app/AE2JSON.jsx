{  // AE2JSON v0.5  //  // Copyright (c) 2012 Cole Reed. All rights reserved.  // email: info AT auralgrey DOT com      //  // This script provides the ability to export AE 3D scene data into JSON  // TODO add comments, automatically iterate through all of a layers setable properties vs manually listing them.  #include "../lib/Logger.jsx";  #include "../lib/json2.js"  #include "../lib/utilities.js"  var L = new Logger();    function AE2JSON(thisObj) {    this.proj = app.project;    this.comp = app.project.activeItem;    this.jsonData = {};    this.jsonData.cameras = {};    this.jsonData.lights  = {};    this.jsonData.objects = {};    this.jsonData.nulls   = {};    this.cameraCount = 0;    this.lightCount  = 0;    this.objectCount = 0;    this.nullCount   = 0;    L.indentOn(false);    this.orgTimeDisplayType = this.proj.timeDisplayType;    this.proj.timeDisplayType = TimeDisplayType.FRAMES;    this.compSettings = this.jsonData.compSettings = new CompSettings(this.comp);    this.doCompLayers();    this.renderJSON();    this.proj.timeDisplayType = this.orgTimeDisplayType;  }  AE2JSON.prototype.checkLayerType = function(layer){    if(layer instanceof CameraLayer){      return "CAMERA";    }else if(layer instanceof LightLayer){      return "LIGHT";    }else if(layer.threeDLayer == true){      if(layer.nullLayer == true){        return "NULL";      }else if(layer.nullLayer == false){        return "OBJECT";      }    }  }  AE2JSON.prototype.doCompLayers = function() {    var myComp, myLayer, numLayers, layerType;        myComp = this.comp;    if(myComp instanceof CompItem) {      numLayers = myComp.layers.length;            for(i=0; i<numLayers; i++) {        myLayer = myComp.layers[i+1];        if(!myLayer.adjustmentLayer == true){          layerType = this.checkLayerType(myLayer);          switch(layerType){            case "CAMERA":              this.cameraCount++;              this.jsonData.cameras["camera_"+this.cameraCount] = new Camera(this.compSettings, myLayer);              break;            case "LIGHT":              this.lightCount++;              this.jsonData.lights["light_"+this.lightCount] = new Light(this.compSettings, myLayer);              break;            case "NULL":              this.nullCount++;              this.jsonData.nulls["null_"+this.nullCount] = new Null(this.compSettings, myLayer);              break;            case "OBJECT":              this.objectCount++;              this.jsonData.objects["object_"+this.objectCount] = new BaseObject(this.compSettings, myLayer);              break;          }        }      }    }  }  AE2JSON.prototype.renderJSON = function() {    var projectName, compName, filename, jsonExportFile, jsonString;    // create JSON file.    projectName = app.project.file.name.replace(".aep", '');    compName    = this.comp.name;    fileName    = projectName + "_"+ compName + ".json";    fileName    = fileName.replace(/\s/g, '');    var path = app.project.file.parent.absoluteURI + "/";    var fullPath = path + fileName;    jsonString = JSON.stringify(this.jsonData, null, "\t");    //    delete this.jsonData;    //jsonString = JSON.stringify(this.jsonData);    jsonExportFile = new File(fullPath);    jsonExportFile.open("w");    jsonExportFile.write(jsonString);    jsonExportFile.close();  }  function CompSettings(compObj){    this.name          = compObj.name;    this.width         = compObj.width;    this.height        = compObj.height;    this.frameRate     = compObj.frameRate;    this.frameDuration = compObj.frameDuration;    this.duration      = compObj.duration;    return this;  }  function BaseObject(compSettings, layer){    // Do not store layer, it's too big and can cause a stack overflow    this.objData = {};    this.objData.name = layer.name;    this.compSettings = compSettings;    this.setPropGroups();    this.doProps(layer);    return this.objData;  }  BaseObject.prototype.setPropGroups = function(){    this.propGroups = ["transform"];  }  BaseObject.prototype.doProps = function(layer){    var i, j, numPropGroups, propGroup, groupName, group, propName, prop, visible;    numPropGroups = this.propGroups.length;    for(i=0; i<numPropGroups; i++){      groupName = this.propGroups[i];      group     = this.objData[groupName] = {};      propGroup = layer[groupName];      for (j = 1; j < propGroup.numProperties; j++){        visible = true;        try{          propGroup.property(j).selected = true;        }catch (err){          visible = false;        }        if (visible) {          propName = propGroup.property(j).name;          propName = propName.toCamelCase();          prop = propGroup.property(j);          group[propName] = this.setPropValues(prop);        }      }    }  }  BaseObject.prototype.setPropValues = function(prop){    var frameRate, duration, timeValues, firstKey, firstKeyTime,         lastKey, lastKeyTime, time, startFrame, endFrame, frame, propVal, times, props;    timeValues = new Array();    if(prop.numKeys > 1){        duration      = this.compSettings.duration;        frameDuration = this.compSettings.frameDuration;        frameRate     = this.compSettings.frameRate;        firstKey      = prop.nearestKeyIndex(0);        firstKeyTime  = prop.keyTime(firstKey);        lastKey       = prop.nearestKeyIndex(duration);        lastKeyTime   = prop.keyTime(lastKey);        startFrame = Number(timeToCurrentFormat(firstKeyTime, frameRate));        endFrame   = Number(timeToCurrentFormat(lastKeyTime, frameRate));        for(frame = startFrame; frame <= endFrame; frame++){          time = frame * frameDuration;          propVal = prop.valueAtTime(time, false);          timeValues.push([time, propVal]);        }    }else{      propVal = prop.value;      timeValues.push(0, propVal);    }        return timeValues;  }    Null.prototype = Object.create(BaseObject.prototype);  function Null(compSettings, layer){    BaseObject.call(this, compSettings, layer);    return this.objData;  }      Camera.prototype = Object.create(BaseObject.prototype);  function Camera(compSettings, layer){    BaseObject.call(this, compSettings, layer);    return this.objData;  }  Camera.prototype.setPropGroups = function(){    this.propGroups = ['transform', 'cameraOption'];  }  Light.prototype = Object.create(BaseObject.prototype);  function Light(compSettings, layer){    this.lightType = layer.lightType;    BaseObject.call(this, compSettings, layer);    return this.objData;  }  Light.prototype.setPropGroups = function(){    this.setLightType();    this.propGroups = ['transform', 'lightOption'];  }  Light.prototype.setLightType = function(){    switch(this.lightType){      case LightType.POINT:        this.objData.lightType = "POINT";        break;      case LightType.SPOT:        this.objData.lightType = "SPOT";        break;      case LightType.PARALLEL:        this.objData.lightType = "PARALLEL";        break;      case LightType.AMBIENT:        this.objData.lightType = "AMBIENT";        break;    }  }  new AE2JSON(this);}