{  // AE2JSON v0.1  //  // Copyright (c) 2012 Cole Reed. All rights reserved.  // email: info AT auralgrey DOT com      //  // This script provides the ability to export AE 3D scene data into JSON  #include "../lib/Logger.jsx";  #include "../lib/json2.js"  var L = new Logger();  function AE2JSON(thisObj) {    this.proj = app.project;    this.comp = app.project.activeItem;    this.jsonData = {};    this.jsonData.cameras = {};    this.jsonData.lights  = {};    this.jsonData.objects = {};    this.jsonData.nulls   = {};    this.cameraCount = 0;    this.lightCount  = 0;    this.objectCount = 0;    this.nullCount   = 0;    L.indentOn(false);    this.orgTimeDisplayType = this.proj.timeDisplayType;    this.proj.timeDisplayType = TimeDisplayType.FRAMES;    this.compSettings = this.jsonData.compSettings = new CompSettings(this.comp);    this.doCompLayers();    this.renderJSON();    this.proj.timeDisplayType = this.orgTimeDisplayType;  }  AE2JSON.prototype.checkLayerType = function(layer){    if(layer instanceof CameraLayer){      return "CAMERA";    }else if(layer instanceof LightLayer){      return "LIGHT";    }else if(layer.threeDLayer == true){      if(layer.nullLayer == true){        return "NULL";      }else if(layer.nullLayer == false){        return "OBJECT";      }    }  }  AE2JSON.prototype.doCompLayers = function() {    var myComp, myLayer, numLayers, layerType;        myComp = this.comp;    if(myComp instanceof CompItem) {      numLayers = myComp.layers.length;            for(i=0; i<numLayers; i++) {        myLayer = myComp.layers[i+1];        if(!myLayer.adjustmentLayer == true){          layerType = this.checkLayerType(myLayer);          switch(layerType){            case "CAMERA":              this.cameraCount++;              this.jsonData.cameras["camera_"+this.cameraCount] = new Camera().init(this.compSettings, myLayer);              break;            case "LIGHT":              this.lightCount++;              this.jsonData.lights["light_"+this.lightCount] = new Light().init(this.compSettings, myLayer);              break;            case "NULL":              this.nullCount++;              this.jsonData.nulls["null_"+this.nullCount] = new Null().init(this.compSettings, myLayer);              break;            case "OBJECT":              this.objectCount++;              this.jsonData.objects["object_"+this.objectCount] = new BaseObject().init(this.compSettings, myLayer);              break;          }        }      }    }  }  function CompSettings(compObj){    this.name          = compObj.name;    this.width         = compObj.width;    this.height        = compObj.height;    this.frameRate     = compObj.frameRate;    this.frameDuration = compObj.frameDuration;    this.duration      = compObj.duration;    return this;  }  function BaseObject(){    this.transforms = ["anchorPoint", "position", "scale",                        "orientation", "xRotation", "yRotation",                        "zRotation", "opacity"];    this.propGroups = [{type:"transform", values:this.transforms}];  }  BaseObject.prototype.init = function(compSettings, layer){    this.objData = {};    this.layer = layer;    this.compSettings = compSettings;    this.doProps();    return this.objData;  }  BaseObject.prototype.doProps = function(){    var i, j, numPropGroups, numProps, propGroup, propList, groupName, group, propName, prop;    numPropGroups = this.propGroups.length;    for(i=0; i<numPropGroups; i++){      propGroup = this.propGroups[i];      groupName = propGroup.type;      group = this.objData[groupName] = {};      numProps = propGroup.values.length;      for(j=0; j<numProps; j++){        propName = propGroup.values[j];        prop = this.layer[groupName][propName];        group[propName] = this.setPropValues(prop);      }    }  }  BaseObject.prototype.setPropValues = function(prop){    var frameRate, duration, timeValues, firstKey, firstKeyTime,         lastKey, lastKeyTime, time, startFrame, endFrame, frame, propVal, times, props;    timeValues = new Array();    if(prop.numKeys > 1){        duration      = this.compSettings.duration;        frameDuration = this.compSettings.frameDuration;        frameRate     = this.compSettings.frameRate;        firstKey      = prop.nearestKeyIndex(0);        firstKeyTime  = prop.keyTime(firstKey);        lastKey       = prop.nearestKeyIndex(duration);        lastKeyTime   = prop.keyTime(lastKey);        startFrame = Number(timeToCurrentFormat(firstKeyTime, frameRate));        endFrame   = Number(timeToCurrentFormat(lastKeyTime, frameRate));        for(frame = startFrame; frame <= endFrame; frame++){          time = frame * frameDuration;          propVal = prop.valueAtTime(time, false);          timeValues.push([time, propVal]);        }    }else{      propVal = prop.value;      timeValues.push(0, propVal);    }        return timeValues;  }  Null.prototype = new BaseObject();  Camera.prototype = new BaseObject();  Camera.prototype.constructor = Camera;  function Camera(){    this.cameraOptions = ["zoom", "aperture", "focusDistance"];    this.transforms = ["pointOfInterest", "position", "orientation",                       "xRotation", "yRotation", "zRotation"];    this.propGroups = [{type:"transform", values:this.transforms},                       {type:"cameraOption", values:this.cameraOptions}];  }  Light.prototype = new BaseObject();  Light.prototype.constructor = Light;  function Light(){  }  Light.prototype.init = function(compSettings, layer){    this.type = layer.lightType;  }  SpotLight.prototype = BaseObject();  SpotLight.prototype.constructor = SpotLight;/*  AE2JSON.prototype.parseLightData = function(light){    var lightType, lightTrans, lightOptions;    // check if the passed layer obj is actually a light.    if (light instanceof LightLayer) {      // increment the lightCount.      this.lightCount++;      // create the lights object if is doesn't already exist.      if(!this.jsonData.lights) this.jsonData.lights = {};      // create the current light object;      lightData = this.jsonData.lights["light_" + this.lightCount] = {};      // set the light name.      lightData.name = light.name;      // use a switch to set the proper variabls depending on the light type.      switch(light.lightType)      {        case LightType.POINT:           this.setPointLightData(light, lightData);          break;        case LightType.SPOT:          this.setSpotLightData(light, lightData);          break;      }    }  }  AE2JSON.prototype.setPointLightData = function(light, lightObj){    var temp, lightTrans, lightOpts;    // set the light type.    lightObj.lightType = "POINT";    // shortcut to light transform property group    lightTrans = light.transform;    temp = {};    temp.position = lightTrans.position.value;    // set the lightObj transforms data    lightObj.transforms = temp;    // shortcut to light options property group    lightOpt = light.lightOption;    temp = {};    temp.intensity = lightOpt.intensity.value;    temp.color     = lightOpt.color.value;    //set the lightObj light options data    lightObj.lightOptions = temp;  }  AE2JSON.prototype.setParallelLightData = function(light, lightObj){    var temp, lightTrans, lightOpts;        // set the light type.    lightObj.lightType = "PARALLEL";    // shortcut to light transform property group    lightTrans = light.transform;    temp = {};    temp.position        = lightTrans.position.value;    temp.pointOfInterest = lightTrans.pointOfInterest.value;    // set the lightObj transforms data    lightObj.transforms = temp;    // shortcut to light options property group    lightOpt = light.lightOption;    temp = {};    temp.intensity = lightOpt.intensity.value;    temp.color     = lightOpt.color.value;    temp.radius    = lightOpt.radius.value;        //set the lightObj light options data    lightObj.lightOptions = temp;  }  AE2JSON.prototype.setSpotLightData = function(light, lightObj){    var temp, lightTrans, lightOpts;        // set the light type.    lightObj.lightType = "SPOT";    // shortcut to light transform property group    lightTrans = light.transform;    temp = {};    temp.position        = lightTrans.position.value;    temp.orientation     = lightTrans.orientation.value;    temp.xRotation       = lightTrans.xRotation.value;    temp.yRotation       = lightTrans.yRotation.value;    temp.zRotation       = lightTrans.zRotation.value;    temp.rotation        = [temp.xRotation, temp.yRotation, temp.zRotation];    temp.pointOfInterest = lightTrans.pointOfInterest.value;    // set the lightObj transforms data    lightObj.transforms = temp;    // shortcut to light options property group    lightOpt = light.lightOption;    temp = {};    temp.intensity = lightOpt.intensity.value;    temp.color     = lightOpt.color.value;    temp.coneAngle = lightOpt.coneAngle.value;    temp.radius    = lightOpt.radius.value;    //set the lightObj light options data    lightObj.lightOptions = temp;  }  AE2JSON.prototype.iterateTransformGroup = function(layer){    var i, transGroup;        transGroup = layer.property("ADBE Transform Group");    for (i = 1; i < transGroup.numProperties; i++){      visible = true;      try{        transGroup.property(i).selected = true;      }catch (err){        visible = false;      }      if (visible) {        //L.puts(transGroup.property(i).name);      }    }  }*/  AE2JSON.prototype.renderJSON = function() {    var projectName, compName, filename, jsonExportFile, jsonString;    // create JSON file.    projectName = app.project.file.name.replace(".aep", '');    compName    = this.comp.name;    fileName    = projectName + "_"+ compName + ".json";    fileName    = fileName.replace(/\s/g, '');    var path = app.project.file.parent.absoluteURI + "/";    var fullPath = path + fileName;    jsonString = JSON.stringify(this.jsonData, null, "\t");    //jsonString = JSON.stringify(this.jsonData);    jsonExportFile = new File(fullPath);    jsonExportFile.open("w");    jsonExportFile.write(jsonString);    jsonExportFile.close();  }  new AE2JSON(this);}